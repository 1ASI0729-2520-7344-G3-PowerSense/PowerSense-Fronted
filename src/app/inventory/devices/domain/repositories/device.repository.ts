// Importa los tipos del dominio: el modelo de dispositivo (Device) y su identificador √∫nico (DeviceId)
import { Device, DeviceId } from '../model/device';


// ============================================================
// üîç INTERFAZ: DeviceQuery
// ------------------------------------------------------------
// Define los posibles filtros para realizar b√∫squedas o listados
// de dispositivos en el repositorio. Todos los campos son opcionales.
// ============================================================
export interface DeviceQuery {
  search?: string; // Texto para b√∫squeda general (por nombre, descripci√≥n, etc.)
  category?: string; // Categor√≠a del dispositivo (ej. ‚Äúsensor‚Äù, ‚Äúluces‚Äù, etc.)
  roomId?: string; // ID de la habitaci√≥n a la que pertenece el dispositivo
  status?: 'active' | 'inactive'; // Estado actual del dispositivo
}


// ============================================================
// üß© INTERFAZ: DeviceRepository
// ------------------------------------------------------------
// Define las operaciones que debe implementar cualquier fuente de
// datos (por ejemplo, una API o base de datos local) para gestionar
// dispositivos. Representa un contrato del dominio.
// ============================================================
export interface DeviceRepository {

  // Obtiene una lista de dispositivos filtrados seg√∫n los criterios del query.
  list(query?: DeviceQuery): Promise<Device[]>;

  // Busca un dispositivo espec√≠fico por su identificador √∫nico.
  getById(id: DeviceId): Promise<Device | null>;

  // Crea un nuevo dispositivo (sin incluir el id, que se genera autom√°ticamente).
  create(device: Omit<Device, 'id'>): Promise<Device>;

  // Actualiza parcialmente un dispositivo existente.
  update(id: DeviceId, device: Partial<Omit<Device, 'id'>>): Promise<Device>;

  // Elimina un dispositivo del repositorio seg√∫n su identificador.
  delete(id: DeviceId): Promise<void>;

  // Cambia el estado (‚Äòactive‚Äô o ‚Äòinactive‚Äô) de un dispositivo.
  setStatus(id: DeviceId, status: 'active' | 'inactive'): Promise<Device>;
}


// ============================================================
// üìù NOTA:
// Esta interfaz define el contrato m√≠nimo necesario para que la
// pantalla o m√≥dulo de gesti√≥n de dispositivos funcione correctamente.
// Si en el futuro se necesitan nuevas funcionalidades (como historial
// de uso o registro de eventos), deben a√±adirse nuevos m√©todos aqu√≠ y
// en las implementaciones correspondientes.
// ============================================================
